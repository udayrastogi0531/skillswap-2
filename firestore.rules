rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - allow public read for guest browsing, authenticated write for own profile
    match /users/{userId} {
      allow read: if true; // Allow public read for guest users to browse
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // User skills subcollection - allow authenticated users to read and write their own
    match /users/{userId}/skills/{skillId} {
      allow read: if request.auth != null; // Allow reading for matching purposes
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Skills collection - allow public read for guest browsing, authenticated write
    match /skills/{skillId} {
      allow read: if true; // Allow public read for guest users to see skills
      allow write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Swap requests - allow authenticated users to read/write their own requests
    match /swapRequests/{requestId} {
      allow read: if request.auth != null && 
        (resource.data.requesterUid == request.auth.uid || 
         resource.data.targetUid == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requesterUid;
      allow update: if request.auth != null && 
        (resource.data.requesterUid == request.auth.uid || 
         resource.data.targetUid == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null && 
        (resource.data.requesterUid == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Ratings - public read for guest browsing, authenticated write
    match /ratings/{ratingId} {
      allow read: if true; // Allow public read for guest users to see ratings
      allow write: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.fromUid);
    }
    
    // Conversations - only participants can access
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        (resource == null || request.auth.uid in resource.data.participants);
    }
    
    // Messages - only conversation participants can access
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
        (exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants));
    }

    // Notifications - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null &&
        (resource == null || resource.data.userId == request.auth.uid);
    }

    // Admin collections for flagged content, system messages, etc.
    match /flaggedContent/{flagId} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /systemMessages/{messageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
